{
  "keyboard_shortcut": "Ctrl+`", 
  "name": "Auto-Comment", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "// -----------------------------------------------------------------------------", 
    "// setup", 
    "", 
    "\tkomodo.assertMacroVersion(3);", 
    "", 
    "// -----------------------------------------------------------------------------", 
    "// comment functions", 
    "", 
    "\t/**", 
    "\t * Adds JSDoc comments to functions, and queries user on parameter types", 
    "\t */", 
    "\tDocCommenter =", 
    "\t{", 
    "\t\t// variables", 
    "\t\t\tEOL:\t\t[\"\\r\\n\", \"\\n\", \"\\r\"][ko.views.manager.currentView.scimoz.eOLMode],", 
    "", 
    "\t\t// storage for function components", 
    "\t\t\tparts:\t\t[],", 
    "", 
    "\t\t// --------------------------------------------------------------------------------", 
    "\t\t// datatypes", 
    "", 
    "\t\t\t/**", 
    "\t\t\t * A Type datatype, that represent a @param, @return value or such like", 
    "\t\t\t * @param\ttype", 
    "\t\t\t * @param\tname", 
    "\t\t\t * @author\tDave Stewart", 
    "\t\t\t */", 
    "\t\t\tType:function(type, content, dataType)", 
    "\t\t\t{", 
    "\t\t\t\tthis.type\t\t= type ? '@' + type : '';", 
    "\t\t\t\tthis.content\t= content || '';", 
    "\t\t\t\tthis.dataType\t= dataType;", 
    "", 
    "\t\t\t\t/**", 
    "\t\t\t\t * Renders the object", 
    "\t\t\t\t */", 
    "\t\t\t\tthis.toString\t= function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar dataType = this.dataType ? '{' +this.dataType + '}\\t' : '';", 
    "\t\t\t\t\treturn this.type + '\\t' + dataType + this.content + '\\t';", 
    "\t\t\t\t}", 
    "\t\t\t},", 
    "", 
    "\t\t\t/**", 
    "\t\t\t * A Line datatype, that represents a single line in a comment block", 
    "\t\t\t * @param\ttext", 
    "\t\t\t * @author\tDave Stewart", 
    "\t\t\t */", 
    "\t\t\tLine:function(text)", 
    "\t\t\t{", 
    "\t\t\t\tthis.text = text || '';", 
    "", 
    "\t\t\t\tthis.toString = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\treturn this.text;", 
    "\t\t\t\t}", 
    "\t\t\t},", 
    "", 
    "\t\t// --------------------------------------------------------------------------------", 
    "\t\t// processing functions", 
    "", 
    "\t\t\t/**", 
    "\t\t\t * Adds a type to the comment block, such as a paramater, author or see", 
    "\t\t\t * @param\ttype", 
    "\t\t\t * @param\tcontent", 
    "\t\t\t * @author\tDave Stewart", 
    "\t\t\t */", 
    "\t\t\taddType:function(type, content, dataType)", 
    "\t\t\t{", 
    "\t\t\t\tthis.parts.push(new this.Type(type, content, dataType));", 
    "\t\t\t},", 
    "", 
    "\t\t\t/**", 
    "\t\t\t * Adds a single line to the comment block", 
    "\t\t\t * @param\ttext", 
    "\t\t\t * @author\tDave Stewart", 
    "\t\t\t */", 
    "\t\t\taddLine:function (text)", 
    "\t\t\t{", 
    "\t\t\t\tthis.parts.push(new this.Line(text));", 
    "\t\t\t},", 
    "", 
    "\t\t// -----------------------------------------------------------------------------", 
    "\t\t// process", 
    "", 
    "\t\t\t/**", 
    "\t\t\t *", 
    "\t\t\t * @param\tindent", 
    "\t\t\t * @returns\tThe full doc comment", 
    "\t\t\t * @author\tDave Stewart", 
    "\t\t\t */", 
    "\t\t\toutput:function(indent)", 
    "\t\t\t{", 
    "\t\t\t\t// variables", 
    "\t\t\t\t\tvar comment = '';", 
    "", 
    "\t\t\t\t// build", 
    "\t\t\t\t\tcomment += indent + '/**' + this.EOL;", 
    "\t\t\t\t\tfor (var i=0; i < this.parts.length; i++)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tcomment += indent + ' * ' + this.parts[i].toString() + this.EOL;", 
    "\t\t\t\t\t}", 
    "\t\t\t\t\tcomment += indent +  ' */' + this.EOL;", 
    "", 
    "\t\t\t\t// return", 
    "\t\t\t\t\treturn comment;", 
    "\t\t\t},", 
    "", 
    "\t\t\t/**", 
    "\t\t\t * Builds the comment block from the passed-in params", 
    "\t\t\t * @param\tparams\tAn array of types", 
    "\t\t\t * @param\tauthor\tAn optional author", 
    "\t\t\t * @author\tDave Stewart", 
    "\t\t\t */", 
    "\t\t\tbuild:function(name, params)", 
    "\t\t\t{", 
    "\t\t\t\t// variables", 
    "\t\t\t\t\tvar author = Components.classes[\"@mozilla.org/process/environment;1\"].getService(Components.interfaces.nsIEnvironment).get('USERNAME');", 
    "", 
    "\t\t\t\t// name", 
    "\t\t\t\t\tthis.addLine();", 
    "", 
    "\t\t\t\t// params", 
    "\t\t\t\t\t//commandOutput('>' + params + '<')", 
    "\t\t\t\t\tfor (var i = 0; i < params.length; i++)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar param = params[i];", 
    "\t\t\t\t\t\tif(param != null)", 
    "\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\tvar dataType\t= ko.interpolate.interpolateStrings(['%(ask: Define type for param \"' +param+ '\":String)'],'','Parameter information');", 
    "\t\t\t\t\t\t\tthis.addType('param', param, dataType);", 
    "\t\t\t\t\t\t}", 
    "\t\t\t\t\t}", 
    "", 
    "\t\t\t\t// return", 
    "\t\t\t\t\tvar dataType\t= ko.interpolate.interpolateStrings(['%(ask: Define type for return value:String)'],'','Parameter information');", 
    "\t\t\t\t\tif(dataType)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tthis.addType('returns', '', dataType);", 
    "\t\t\t\t\t}", 
    "", 
    "\t\t\t\t// author", 
    "\t\t\t\t\t//this.addType('author', author);", 
    "\t\t\t},", 
    "", 
    "\t\t\t/**", 
    "\t\t\t * Parses the selection made by the main function", 
    "\t\t\t * @param\tsel", 
    "\t\t\t * @returns", 
    "\t\t\t * @author\tDave Stewart", 
    "\t\t\t */", 
    "\t\t\tparse:function(sel)", 
    "\t\t\t{", 
    "\t\t\t\tvar rx\t\t\t= /^([\\t ]*)([a-z][a-z0-9_]+)\\s*:?\\s*([a-z][a-z0-9_]+)\\s*\\((.*)\\)/mi;", 
    "\t\t\t\tvar matches \t= sel.match(rx);", 
    "\t\t\t\tif(matches)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar params = matches[4].replace(/(^\\s+|\\s+$)/g, '');", 
    "\t\t\t\t\tvar obj =", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tindent:\t\tmatches[1],", 
    "\t\t\t\t\t\tname:\t\tmatches[2] === 'function' ? matches[3] : matches[2],", 
    "\t\t\t\t\t\tparams:\t\tparams == '' ? [] : params.split(/\\W+/g)", 
    "\t\t\t\t\t};", 
    "", 
    "\t\t\t\t\treturn obj;", 
    "\t\t\t\t}", 
    "\t\t\t\treturn null;", 
    "\t\t\t},", 
    "", 
    "\t// -----------------------------------------------------------------------------", 
    "\t// main", 
    "", 
    "\t\t/**", 
    "\t\t * The main function that selects the text and creates the comment block", 
    "\t\t * @param\tauthor\tAn optional author to append to the end of the comment block", 
    "\t\t */", 
    "\t\tmain:function(author)", 
    "\t\t{", 
    "\t\t\t// stuff", 
    "\t\t\t\tif (komodo.view) { komodo.view.setFocus() };", 
    "", 
    "\t\t\t// editor variable", 
    "\t\t\t\tvar ke = komodo.editor;", 
    "", 
    "\t\t\t// select the line", 
    "\t\t\t\tkomodo.doCommand('cmd_end')", 
    "\t\t\t\tkomodo.doCommand('cmd_selectHome')", 
    "\t\t\t\tkomodo.doCommand('cmd_selectHome')", 
    "", 
    "\t\t\t// grab any selection", 
    "\t\t\t\ttry{sel = komodo.interpolate('%s'); }catch(err){}", 
    "", 
    "\t\t\t// parse the selection", 
    "\t\t\t\tvar matches\t= this.parse(sel);", 
    "", 
    "\t\t\t// if there's a match, create a doc comment", 
    "\t\t\t\tif(matches)", 
    "\t\t\t\t{", 
    "\t\t\t\t\t// build", 
    "\t\t\t\t\t\tthis.build(matches.name, matches.params);", 
    "\t\t\t\t\t\tvar comment = this.output(matches.indent);", 
    "", 
    "\t\t\t\t\t// insert", 
    "\t\t\t\t\t\tke.insertText(ke.currentPos, comment );", 
    "", 
    "\t\t\t\t\t// palce cursor in editing position", 
    "\t\t\t\t\t\tkomodo.doCommand('cmd_lineNext');", 
    "\t\t\t\t\t\tkomodo.doCommand('cmd_end')", 
    "", 
    "\t\t\t\t}", 
    "", 
    "\t\t\t// otherwise, reset the selection", 
    "\t\t\t\telse", 
    "\t\t\t\t{", 
    "\t\t\t\t\tkomodo.doCommand('cmd_home')", 
    "\t\t\t\t}", 
    "", 
    "\t\t}", 
    "", 
    "\t}", 
    "", 
    "", 
    "", 
    "// -----------------------------------------------------------------------------", 
    "// main", 
    "", 
    "\tDocCommenter.main();"
  ], 
  "trigger": "trigger_postopen", 
  "rank": 100, 
  "version": "1.0.7", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/text_align_left.png"
}